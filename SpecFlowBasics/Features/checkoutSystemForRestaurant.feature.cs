// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SpecFlowBasics.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Calculate Total Bill for a Group Ordering Starters, Mains, and Drinks Based on Or" +
        "der Time")]
    public partial class CalculateTotalBillForAGroupOrderingStartersMainsAndDrinksBasedOnOrderTimeFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "checkoutSystemForRestaurant.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Calculate Total Bill for a Group Ordering Starters, Mains, and Drinks Based on Or" +
                    "der Time", @"  As a restaurant owner
  I want to ensure the checkout system correctly calculates the total bill
  So that customers are charged accurately based on their orders and discounts

  Rules:
    - Starters cost £4.00 each.
    - Mains cost £7.00 each.
    - Drinks cost £2.50 each.
    - Drinks ordered before 19:00 receive a 30% discount.
    - A 10% service charge is applied to the total cost of food (starters and mains).", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Calculate correct bill for a group of 4 with one member canceling their order who" +
            " came before 19:00")]
        public virtual void CalculateCorrectBillForAGroupOf4WithOneMemberCancelingTheirOrderWhoCameBefore1900()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate correct bill for a group of 4 with one member canceling their order who" +
                    " came before 19:00", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 21
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Item",
                            "Quantity",
                            "Price",
                            "orderedTime"});
                table1.AddRow(new string[] {
                            "Starter",
                            "4",
                            "4.00",
                            "2025-03-19T18:30:23.317z"});
                table1.AddRow(new string[] {
                            "Main",
                            "4",
                            "7.00",
                            "2025-03-19T18:25:23.317z"});
                table1.AddRow(new string[] {
                            "Drinks",
                            "4",
                            "2.50",
                            "2025-03-19T18:10:23.317z"});
#line 24
  testRunner.Given("Four people  group orders the following:", ((string)(null)), table1, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Total"});
                table2.AddRow(new string[] {
                            "56.10"});
#line 29
  testRunner.Then("the total bill should be calculated as follows:", ((string)(null)), table2, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Item",
                            "Quantity",
                            "Price",
                            "orderedTime"});
                table3.AddRow(new string[] {
                            "Starter",
                            "3",
                            "4.00",
                            "2025-03-19T18:30:23.317z"});
                table3.AddRow(new string[] {
                            "Main",
                            "3",
                            "7.00",
                            "2025-03-19T18:25:23.317z"});
                table3.AddRow(new string[] {
                            "Drinks",
                            "3",
                            "2.50",
                            "2025-03-19T18:10:23.317z"});
#line 34
  testRunner.Given("one member of the group cancels their order:", ((string)(null)), table3, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Total"});
                table4.AddRow(new string[] {
                            "42.075"});
#line 39
  testRunner.Then("the final total bill should be deducted as follows:", ((string)(null)), table4, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
